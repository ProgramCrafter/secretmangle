name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        target: [x86_64-unknown-linux-gnu, aarch64-unknown-linux-gnu]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            host_triple: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            host_triple: aarch64-unknown-linux-gnu
            # Use cross-compilation for aarch64 on x86_64
            cross: true
            cross_image: messense/rust-musl-cross:aarch64-musl
          - os: macos-latest
            target: x86_64-apple-darwin
            host_triple: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
            host_triple: aarch64-apple-darwin
      fail-fast: false

    steps:
    - uses: actions/checkout@v4

    - name: Install cross (if needed)
      if: matrix.cross
      run: cargo install cross --version 0.2.5

    - name: Install target
      run: rustup target add ${{ matrix.target }}

    - name: Run tests
      if: !matrix.cross
      run: cargo test --target ${{ matrix.target }} --no-default-features --verbose

    - name: Run tests (cross-compiled)
      if: matrix.cross
      run: |
        export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
        export CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc
        export CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++
        cargo test --target ${{ matrix.target }} --no-default-features --verbose

    - name: Run Miri tests (x86_64 only)
      if: matrix.host_triple == 'x86_64-unknown-linux-gnu' && matrix.target == 'x86_64-unknown-linux-gnu'
      run: |
        rustup component add miri
        cargo miri test --no-default-features

  check-fmt:
    name: Check formatting
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: nightly
        override: true
    - run: rustup component add rustfmt
    - run: cargo fmt -- --check

  clippy:
    name: Lint with Clippy
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: nightly
        components: clippy
        override: true
    - run: cargo clippy -- -D warnings

  doc:
    name: Check documentation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: nightly
        override: true
    - run: cargo doc --no-deps --document-private-items --all-features
